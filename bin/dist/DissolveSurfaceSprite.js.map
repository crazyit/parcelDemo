{"version":3,"sources":["DissolveSurfaceSprite.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA,IAAI,EAAE,swDAAN,EAsDA;;AACA,IAAI,EAAE,2mBAAN,EAsBA;;IACqB;;;;;AAOjB,mCAAA;AAAA;;AAAA;;AACI;;AACA,UAAK,IAAL;;AAFJ;AAGC;;;;WAEM,gBAAI;AACP,WAAK,WAAL,GAAmB,IAAI,IAAI,CAAC,OAAT,CAAiB,qBAAqB,CAAC,uBAAvC,EAAgE,qBAAqB,CAAC,uBAAtF,CAAnB,CADO,CAEP;;AACA,WAAK,kBAAL,GAA0B,IAA1B;AAEA,WAAK,WAAL,CAAiB,MAAjB,GAA0B,IAAI,IAAI,CAAC,QAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,qBAAqB,CAAC,uBAAhD,CAA1B;AACH;;;WAEM,oBAAW,CAAX,EAA4B;AAC9B,WAAK,GAAL,GAAmB,CAAnB;AACJ;AAED;;;;;;;WAIO,yBAAgB,CAAhB,EAAiC;AACpC;AACA,WAAK,WAAL,CAAiB,YAAjB,IAAiC,CAAjC;AACH;;;WAEM,yBAAgB,IAAhB,EAA4B;AAAA;;AAC/B,MAAA,IAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,IAAjB,EAAsB,IAAI,IAAI,CAAC,OAAT,CAAiB,IAAjB,EAAuB,UAAC,GAAD,EAAQ;AACjD,QAAA,OAAO,CAAC,GAAR,CAAY,UAAQ,GAApB;AACA,QAAA,MAAI,CAAC,WAAL,CAAiB,YAAjB,IAAiC,GAAG,CAAC,OAAJ,CAAY,UAA7C,CAFiD,CAGjD;AACH,OAJqB,CAAtB,EAD+B,CAM/B;AACA;AACA;AACA;AACA;AACH;AACD;;;;;;;WAIO,8BAAqB,CAArB,EAAsB;AACzB,WAAK,WAAL,CAAiB,qBAAjB,IAA0C,CAA1C;AACH,MAED;;;;WACO,sBAAa,OAAb,EAAoC,CAApC,EAA+C,CAA/C,EAAwD;AAC3D;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,KAAK,GAAxB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,KAAK,GAAL,CAAS,KAAnD,EAA0D,KAAK,GAAL,CAAS,MAAnE,EAA2E,IAA3E,EAAiF,KAAK,WAAtF;AACH;;;;EAzD8C,IAAI,CAAC,SAEpD;;;;AACO,qBAAA,CAAA,uBAAA,GAAkC,IAAlC","file":"DissolveSurfaceSprite.js","sourceRoot":"..\\..\\src","sourcesContent":["\r\n//顶点着色器   直接使用的是laya官方自带的\r\nvar vs: string = `\r\n        attribute vec4 posuv;\r\n        attribute vec4 attribColor;\r\n        attribute vec4 attribFlags;\r\n        attribute vec4 clipDir;\r\n        attribute vec2 clipRect;\r\n        uniform vec4 clipMatDir;\r\n        uniform vec2 clipMatPos;\r\n        varying vec2 cliped;\r\n        uniform vec2 size;\r\n        uniform vec2 clipOff;\r\n        #ifdef WORLDMAT\r\n            uniform mat4 mmat;\r\n        #endif\r\n        #ifdef MVP3D\r\n            uniform mat4 u_MvpMatrix;\r\n        #endif\r\n        varying vec4 v_texcoordAlpha;\r\n        varying vec4 v_color;\r\n        varying float v_useTex;\r\n        void main() {\r\n            vec4 pos = vec4(posuv.xy,0.,1.);\r\n            #ifdef WORLDMAT\r\n                pos=mmat*pos;\r\n            #endif\r\n            vec4 pos1  =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,0.,1.0);\r\n            #ifdef MVP3D\r\n                gl_Position=u_MvpMatrix*pos1;\r\n            #else\r\n                gl_Position=pos1;\r\n            #endif\r\n            v_texcoordAlpha.xy = posuv.zw;\r\n            v_texcoordAlpha.z = attribColor.a/255.0;\r\n            v_color = attribColor/255.0;\r\n            v_color.xyz*=v_color.w;\r\n            v_useTex = attribFlags.r/255.0;\r\n            float clipw = length(clipMatDir.xy);\r\n            float cliph = length(clipMatDir.zw);\r\n            vec2 clpos = clipMatPos.xy;\r\n            #ifdef WORLDMAT\r\n            if(clipOff[0]>0.0){\r\n                clpos.x+=mmat[3].x;\r\n                clpos.y+=mmat[3].y;\r\n            }\r\n            #endif\r\n            vec2 clippos = pos.xy - clpos;\r\n\r\n            if(clipw>20000. && cliph>20000.)\r\n                cliped = vec2(0.5,0.5);\r\n            else {\r\n                cliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\r\n            }\r\n        }\r\n    `\r\n//片元着色器  一个简单的功能 根据噪图 过滤掉低于阈值的颜色\r\nvar ps: string = `\r\n        precision mediump float;\r\n        varying vec2 v_texcoord;\r\n        varying vec4 v_color;\r\n        uniform sampler2D texture;\r\n        uniform sampler2D u_NoiseTex;\r\n        //消融阈值  0 - 1\r\n        uniform float u_DissolveThreshold;\r\n\r\n        varying vec4 v_texcoordAlpha;\r\n\r\n        void main(){\r\n            vec4 noiseTexValue = texture2D(u_NoiseTex, v_texcoordAlpha.xy);\r\n            if (noiseTexValue.r < u_DissolveThreshold)\r\n            {\r\n                discard;\r\n            }\r\n            \r\n            gl_FragColor = texture2D(texture, v_texcoordAlpha.xy);\r\n        }\r\n    `;\r\n\r\n//需要继承精灵\r\nexport default class DissolveSurfaceSprite extends Laya.Sprite {\r\n    private shaderValue: Laya.Value2D;\r\n    //定义一个shaderid  用于laya在查找shader 时使用   \r\n    static DissolveSurfaceSaveName: number = 9999;\r\n\r\n    tex: Laya.Texture2D;\r\n\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    public init(): void {\r\n        this.shaderValue = new Laya.Value2D(DissolveSurfaceSprite.DissolveSurfaceSaveName, DissolveSurfaceSprite.DissolveSurfaceSaveName);\r\n        //重要的一步  将渲染设置为自定义\r\n        this.customRenderEnable = true;\r\n\r\n        this.shaderValue.shader = new Laya.Shader2X(vs, ps, DissolveSurfaceSprite.DissolveSurfaceSaveName);\r\n    }\r\n\r\n    public setTexture(t: Laya.Texture2D) {\r\n        (this.tex as any) = t;\r\n    }\r\n\r\n    /**\r\n     * 设置噪图纹理\r\n     * @param t \r\n     */\r\n    public setNoiseTexture(t: Laya.Texture2D) {\r\n        //这里的名字是在shader里 定义好的。\r\n        this.shaderValue['u_NoiseTex'] = t;\r\n    }\r\n\r\n    public setNoiseTexSkin(skin: string) {\r\n        Laya.loader.load(skin,new Laya.Handler(this, (tex) => {\r\n            console.log(\"tex::\"+tex);\r\n            this.shaderValue['u_NoiseTex'] = tex._bitmap._glTexture\r\n            // this.shaderValue['u_NoiseTex'] = tex._getSource();\r\n        }));\r\n        // Laya.Texture2D.load(skin, new Laya.Handler(this, (tex) => {\r\n        //     console.log(\"tex::\"+tex);\r\n        //     // this.shaderValue['u_NoiseTex'] = tex._bitmap._glTexture\r\n        //     // this.shaderValue['u_NoiseTex'] = tex._getSource();\r\n        // }));\r\n    }\r\n    /**\r\n     * 设置消融范围  0 是原图  1 是消失完成\r\n     * @param t \r\n     */\r\n    public setDissolveThreshold(t) {\r\n        this.shaderValue['u_DissolveThreshold'] = t;\r\n    }\r\n\r\n    // 自定义渲染提交\r\n    public customRender(context: Laya.Context, x: number, y: number) {\r\n        //这一步很重要 \r\n        context.drawTarget(this.tex as any, x, y, this.tex.width, this.tex.height, null, this.shaderValue);\r\n    }\r\n}"]}